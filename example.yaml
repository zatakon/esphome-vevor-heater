substitutions:
  id_name: rnw_esphm_c3_01_workshop_heater
  friendly_name: esp32c3-workshop-heater

esphome:
  name: ${friendly_name}
  friendly_name: ${friendly_name}
  project:
    name: "vevor.diesel-heater"
    version: "2.0.0"

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable logging
logger:
  level: INFO
  baud_rate: 115200
  hardware_uart: USB_SERIAL_JTAG  # Use USB JTAG for logging on ESP32-C3

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  
  # Enable fallback hotspot
  ap:
    ssid: "Workshop Heater Fallback"
    password: "fallback123"

captive_portal:

web_server:
  local: True
  port: 80

# Add the library
external_components:
  - source: github://zatakon/esphome-vevor-heater
    components: [vevor_heater]

# UART configuration for Vevor heater
uart:
  - id: heater_serial
    rx_pin: 
      number: GPIO1
      inverted: true
    tx_pin:
      number: GPIO0
      inverted: true
    baud_rate: 4800

# Main heater component with automatic sensor creation
# Using MANUAL mode
vevor_heater:
  id: my_heater
  uart_id: heater_serial
  control_mode: manual           # Manual mode - heater runs at set power level
  default_power_percent: 80      # Default 80% power when turned on
  injected_per_pulse: 0.022      # Initial value (in ml)

# Manual heater controls (switches and sliders)
switch:
  - platform: template
    name: "Heater Power"
    id: heater_power_switch
    icon: "mdi:fire"
    optimistic: true
    turn_on_action:
      - lambda: |-
          id(my_heater).turn_on();
    turn_off_action:
      - lambda: |-
          id(my_heater).turn_off();

number:
  - platform: template
    name: "Heater Power Level"
    id: heater_power_level
    icon: "mdi:percent"
    min_value: 10
    max_value: 100
    step: 10
    unit_of_measurement: "%"
    initial_value: 80
    optimistic: true
    set_action:
      - lambda: |-
          id(my_heater).set_power_level_percent(x);
